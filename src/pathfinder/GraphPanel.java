/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pathfinder;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;

/**
 *
 * @author Idavor
 */
public class GraphPanel extends javax.swing.JFrame {

    private double bM /*boundaryMultiplier*/ = 1.0;
    private int boundaryX = 500;
    private int boundaryY = 500;
    private int ovalSize = 6;

    /**
     * Creates new form GraphPanel
     */
    public GraphPanel() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphPanel().setVisible(true);
            }
        });
    }

    public void reset() {
        initComponents();

        bM = 1.0;
        ovalSize = 6;
        boundaryX = 500;
        boundaryY = 500;

    }

    public void paint(Graphics g) {
        int i = 0;

        while (i < PathFinder.graph.verticesList.size()) {

            if ((PathFinder.graph.verticesList.get(i).x > boundaryX) || (PathFinder.graph.verticesList.get(i).y > boundaryY)) {

                g.clearRect(0, 0, 10000, 10000);
                if (PathFinder.graph.verticesList.get(i).x > PathFinder.graph.verticesList.get(i).y) {

                    if (PathFinder.graph.verticesList.get(i).x > boundaryX) {
                        bM = bM * boundaryX / (PathFinder.graph.verticesList.get(i).x);
                        boundaryX = (PathFinder.graph.verticesList.get(i).x);
                        boundaryY = (PathFinder.graph.verticesList.get(i).x);
                    }
                    if (PathFinder.graph.verticesList.get(i).y > boundaryY) {
                        bM = bM * boundaryY / (PathFinder.graph.verticesList.get(i).y);
                        boundaryY = (PathFinder.graph.verticesList.get(i).y);
                        boundaryX = (PathFinder.graph.verticesList.get(i).y);
                    }
                } else {

                    if (PathFinder.graph.verticesList.get(i).x > boundaryX) {
                        bM = bM * boundaryX / (PathFinder.graph.verticesList.get(i).x);
                        boundaryX = (PathFinder.graph.verticesList.get(i).x);
                        boundaryY = (PathFinder.graph.verticesList.get(i).x);
                    }
                    if (PathFinder.graph.verticesList.get(i).y > boundaryY) {
                        bM = bM * boundaryY / (PathFinder.graph.verticesList.get(i).y);
                        boundaryY = (PathFinder.graph.verticesList.get(i).y);
                        boundaryX = (PathFinder.graph.verticesList.get(i).y);
                    }
                }

                i = 0;
            }
            g.setColor(Color.BLUE);

            g.setFont(new Font("TimesRoman", Font.PLAIN, (int) (25 * (0.3 + bM))));
            g.drawString(Integer.toString(i), (int) (PathFinder.graph.verticesList.get(i).x * bM + 50) - 3, (int) (PathFinder.graph.verticesList.get(i).y * bM + 50 - 6));

            g.setColor(Color.BLACK);

            g.drawOval((int) (PathFinder.graph.verticesList.get(i).x * bM + 50) - 3, (int) (PathFinder.graph.verticesList.get(i).y * bM + 50) - 3, (int) (ovalSize), (int) (ovalSize));

            i++;
        }
        i = 0;
        while (i < PathFinder.graph.edgesList.size()) {

            g.drawLine((int) (PathFinder.graph.verticesList.get(PathFinder.graph.edgesList.get(i).getA()).x * bM + 50),
                    (int) (PathFinder.graph.verticesList.get(PathFinder.graph.edgesList.get(i).getA()).y * bM + 50),
                    (int) (PathFinder.graph.verticesList.get(PathFinder.graph.edgesList.get(i).getB()).x * bM + 50),
                    (int) (PathFinder.graph.verticesList.get(PathFinder.graph.edgesList.get(i).getB()).y * bM + 50));
            i++;
        }
        if (PathFinder.path != null) {
            for (int j = 0; j < PathFinder.path.size() - 1; j++) {

                g.setColor(Color.RED);
                g.drawLine((int) (PathFinder.graph.verticesList.get(PathFinder.path.get(j)).x * bM + 54),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path.get(j)).y * bM + 54),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path.get(j + 1)).x * bM + 54),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path.get(j + 1)).y * bM + 54));
            }
        }
        if (PathFinder.path1 != null) {
            for (int j = 0; j < PathFinder.path1.size() - 1; j++) {

                g.setColor(Color.GREEN);
                g.drawLine((int) (PathFinder.graph.verticesList.get(PathFinder.path1.get(j)).x * bM + 46),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path1.get(j)).y * bM + 46),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path1.get(j + 1)).x * bM + 46),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path1.get(j + 1)).y * bM + 46));
            }
        }
        if (PathFinder.path2 != null) {
            for (int j = 0; j < PathFinder.path2.size() - 1; j++) {

                g.setColor(Color.ORANGE);
                g.drawLine((int) (PathFinder.graph.verticesList.get(PathFinder.path2.get(j)).x * bM + 58),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path2.get(j)).y * bM + 58),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path2.get(j + 1)).x * bM + 58),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path2.get(j + 1)).y * bM + 58));
            }
        }
        if (PathFinder.path3 != null) {
            for (int j = 0; j < PathFinder.path3.size() - 1; j++) {

                g.setColor(Color.BLUE);
                g.drawLine((int) (PathFinder.graph.verticesList.get(PathFinder.path3.get(j)).x * bM + 42),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path3.get(j)).y * bM + 42),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path3.get(j + 1)).x * bM + 42),
                        (int) (PathFinder.graph.verticesList.get(PathFinder.path3.get(j + 1)).y * bM + 42));
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
